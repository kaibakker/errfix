== Introduction ==

*errfix* creates a software model of your system, from a simple CSV file. errfix lets you create _Random Walks_ across your model, moving from State to State by executing actions.
 
== Google Search Homepages Examples: A Simple _Random_ Walk ==

This example script creates a model and outputs a text description of a random walk. (It doesn't run any tests.)


==== The data: ====
The CSV file contents should be:

||Start/End||WEB||IMAGES||MAPS||SHOPPING||MAIL||
||WEB|| ||click_images||click_maps||click_shopping||click_mail||
||IMAGES||click_web|| ||click_maps||click_shopping||click_mail||
||MAPS||click_web||click_images|| ||click_shopping||click_mail||
||SHOPPING||click_web||click_images||click_maps|| ||click_mail||
||MAIL||click_web|| || || || ||

You can download this CSV [http://sites.google.com/site/exploretesting/Home/google_searches.csv file here].

==== The code: ====
The example errfix Google Searches code is:

{{{
# errfix HelloWorld example.
# 
require 'rubygems'
require 'errfix'

# Create model,Load in the CSV file with our Google Searches model
google_searches = StateModelCreator.new.load_table 'google_searches.csv'

# Write the model's graph to the filesystem (PostScript format)
google_searches.create_dot_graph.output("google_searches.dot")

# Create a random walk across the model.
# Remember its random, so each time you run it, it might give you a different path...
google_walk_1 = google_searches.random_walk("WEB")

# Step Through the walk.
google_walk_1.steps.each do |a_transition|
  puts "Step: #{a_transition}"
end # end the walk
}}}


You can download [http://sites.google.com/site/exploretesting/Home/errfix_google_eg.rb errfix_google_eg.rb here].

====How to run the code:====
Place the above 2 files in the same folder, open a UNIX Terminal or DOS prompt in the same  folder and type:
{{{
ruby errfix_google_eg.rb
}}}

The output will look something like this:
{{{
Step:WEB,click_images => IMAGES
Step:IMAGES,click_web => WEB
Step:WEB,click_shopping => SHOPPING
Step:SHOPPING,click_web => WEB
Step:WEB,click_maps => MAPS
Step:MAPS,click_mail => MAIL
Step:MAIL,click_web => WEB
Step:WEB,click_mail => MAIL
Step:MAIL,click_web => WEB
Step:WEB,click_shopping => SHOPPING
Step:SHOPPING,click_web => WEB
Step:WEB,click_images => IMAGES
Step:IMAGES,click_web => WEB
Step:WEB,click_maps => MAPS
Step:MAPS,click_images => IMAGES
Step:IMAGES,click_maps => MAPS
Step:MAPS,click_mail => MAIL
Step:MAIL,click_web => WEB
Step:WEB,click_images => IMAGES
Step:IMAGES,click_maps => MAPS
}}}

If you run the script again, you'll probably get a slightly different output. Thats because the script is generating _random_ walks, therefore each time it will likely make a different random choice of steps.

If all is well you should get a DOT file placed in the same folder called google_searches.dot DOT files can be viewed using [http://www.graphviz.org/ GraphViz].
The model when rendered in Graphviz should look similar to this:
http://sites.google.com/site/exploretesting/Home/google_searches.png




== Google Search Homepages Examples: A Random Walk Driving a (Fake) System Under Test==

Once you have created a random walk, you can the use this walk to drive your test system using the Walk#drive_using method. Pass in your Test driver code and allow the Walk to drive your System under test.

==== The code: ====

First lets print out the coverage statistics for this walk:

{{{
puts "State Coverage: #{google_walk_1.state_coverage}"
puts "Transition Coverage: #{google_walk_1.transition_coverage}"
}}}

Now lets create a simple System Under Test (SUT). This could be a class you are testing, but also a driver to the SUT. Typically this driver would direct your test tool, Selenium RC or WATiR.
{{{
class SystemUnderTestDriver
  # Action Methods that errfix will look for...
  def click_web;      puts "action: click_web"; end # end method
  def click_images;   puts "action: click_images"; end # end method
  def click_maps;     puts "action: click_maps"; end # end method
  def click_shopping; puts "action: click_shopping"; end # end method
  def click_mail;     puts "action: click_mail"; end # end method
  # Include these methods to verify state of the SUT
  def test_WEB;       puts "testing: WEB"; end # end method
  def test_IMAGES;    puts "testing: IMAGES"; end # end method
  def test_MAPS;      puts "testing: MAPS"; end # end method
  def test_SHOPPING;  puts "testing: SHOPPING"; end # end method
  def test_MAIL;      puts "testing: MAIL"; end # end method  
end # class under test
}}}

The above driver code would be required normally, even when not using errfix. We've created it here to allow you to see how errfix might interact with your system.

errfix can now easily drive through your model, along the path of the Random Walk. errfix will call methods with the same name as your actions (in the CSV file). It will also call a method called test_STATE-NAME after each action. These 'test_' methods can be used to execute tests, ensuring your SUT has correctly reached a new State.

{{{
google_walk_1.drive_using(SystemUnderTestDriver.new)
}}}

You can download [http://sites.google.com/site/exploretesting/Home/errfix_google_eg_2.rb the code here].

====How to run the code:====
Place the above 2 files in the same folder, open a UNIX Terminal or DOS prompt in the same  folder and type:
{{{
ruby errfix_google_eg_2.rb
}}}

The output will look something like this:

{{{
State Coverage: 100.0
Transition Coverage: 64.7058823529412

Lets get our Random Walk to drive our SUT or at least our SUT driver code...
testing: WEB
action: click_images
testing: IMAGES
action: click_mail
testing: MAIL
action: click_web
testing: WEB
action: click_maps
testing: MAPS
action: click_web
testing: WEB
...
}}}



